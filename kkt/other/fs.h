#ifndef __FS_H_
#define __FS_H_

#include <stdint.h>
#include <stdbool.h>
#include "fs_hw.h"

// Нет ошибок
#define FS_RET_SUCCESS	0x00
// Неизвестная команда, неверный формат посылки или неизвестные параметры.
// Команда с таким кодом не найдена. Или формат, длина, состав (тип, формат) параметров не соответствует спецификации
#define FS_RET_UNKNOWN_CMD_OR_ARGS	0x01
// Неверное состояние ФН
// Данная команда требует другого состояния ФН
#define FS_RET_INVAL_STATE	0x02
// Ошибка ФН
// Запросить расширенные сведения об ошибке
#define FS_RET_FS_ERROR	0x03
// Ошибка КС (криптографический сопроцессор)
// Запросить расширенные сведения об ошибке
#define FS_RET_CC_ERROR	0x04
// Закончен срок эксплуатации ФН
#define FS_RET_LIFETIME_OVER	0x05
// Архив ФН переполнен
#define FS_RET_ARCHIVE_OVERFLOW	0x06
// Неверные дата и/или время
// Дата и время операции не соответствуют логике работы ФН
#define FS_RET_INVALID_DATETIME	0x07
// Нет запрошенных данных
// Запрошенные данные отсутствуют в Архиве ФН
#define FS_RET_NO_DATA	0x08
// Некорректное значение параметров команды
// Параметры команды имеют правильный формат, но их значение не верно
#define FS_RET_INVAL_ARG_VALUE	0x09
// Превышение размеров TLV данных
// Размер передаваемых TLV данных превысил допустимый
#define FS_RET_TLV_OVERSIZE	0x10
// 0Ah	Некорректная команда.
// (Код ответа формируется только в случае, если ФН активизирован в режиме поддержки ФФД - 1.1)	
// В данном режиме функционирования ФН команда не разрешена
#define FS_RET_INVALID_CMD	0x0a
// 0Bh	Неразрешенные реквизиты.
// (Код ответа формируется только в случае, если ФН активизирован в режиме поддержки ФФД - 1.1)	
// Во входящем сообщении ККТ с кодом команды 07h ККТ передает в ФН данные, которые должен формировать ФН.
// Номер некорректного реквизита, переданного ККТ в ФН, передается ФН в ККТ в данных ответа(Uint16, LE)
#define FS_RET_ILLEGAL_ATTR	0x0b
// 0Ch	Дублирование данных	ККТ передает данные, которые уже были переданы в составе данного документа.
// Номер дублируемого реквизита передаётся в данных ответа(Uint16, LE)
#define FS_RET_DUP_ATTR 0x0c
// 0Dh	Отсутствуют данные, необходимые для корректного учета в ФН.
// Для корректного учета и хранения фискальных данных, требуется передача недостающих данных в ФН.
// Для команд завершения чеков может содержать доп.байт ответа, указывающий на недостающие суммы по разным видам оплаты
#define FS_RET_MISS_ATTR 0x0d
// 0Eh	Количество позиций в документе, превысило допустимый предел.
// ФН передает в ККТ этот код ответа, если максимальное число позиций, превышает допустимые пределы
#define FS_RET_POS_OVERFLOW	0x0e
// Нет транспортного соединения
// Транспортное соединение (ТС) отсутствует. Необходимо установить ТС с ОФД и передать в ФН команду Транспортное соединение с ОФД
#define FS_RET_NO_TRANSPORT	0x11
// Исчерпан ресурс КС (криптографического сопроцессора)
// Требуется закрытие фискального режима
#define FS_RET_CC_OUT	0x12
// Исчерпан ресурс хранения
// Ресурс для хранения документов для ОФД исчерпан
#define FS_RET_ARCHIVE_OUT	0x14
// Исчерпан ресурс Ожидания передачи сообщения
// Время нахождения в очереди самого старого сообщения на выдачу более 30
// календарных дней. Только для касс в режиме передачи данных.
#define FS_RET_MSG_SEND_TIMEOUT	0x15
// Продолжительность смены более 24 часов
#define FS_RET_SHIFT_TIMEOUT	0x16
// Неверная разница во времени между 2 операциями
// Разница более чем на 5 минут отличается от разницы определенному по внутреннему таймеру ФН.
#define FS_RET_WRONG_PERIOD	0x17
// 18h
// Некорректный реквизит, переданный ККТ в ФН	Реквизит, переданный ККТ в ФН, не соответствует установленным требованиям.
// Номер некорректного реквизита передаётся в данных ответа(Uint16, LE)
#define FS_RET_INVALID_ATTR 0x18
// 19h
// Некорректный реквизит с признаком продажи подакцизного товара.
// Фискальный документ, переданный в ФН, содержит признак продажа подакцизного товара, 
// отчет о регистрации или текущий отчет об изменении параметров регистрации, хранящийся в ФН,
// не содержит признак продажа подакцизного товара
#define FS_RET_INVALID_ATTR_EXISABLE 0x19
// Сообщение от ОФД не может быть принято
// Сообщение ОФД не может быть принято, расширенные данные ответа указывают причину
#define FS_RET_MSG_NOT_ACCEPTED	0x20

// Длина данных в ответе меньше ожидаемой
#define FS_RET_INVALID_RESP_DATA_SIZE	(0x21)

// дата
#pragma pack(push, 1)
typedef struct {
	uint8_t year;
	uint8_t month;
	uint8_t day;
} fs_date_t;
#pragma pack(pop)

// время
#pragma pack(push, 1)
typedef struct {
	uint8_t hour;
	uint8_t minute;
} fs_time_t;
#pragma pack(pop)

// дата/время
#pragma pack(push, 1)
typedef struct  {
	fs_date_t date;
	fs_time_t time;
} fs_date_time_t;
#pragma pack(pop)


// Команда 60h  Сброс состояния ФН
// Данная команда позволяет изменить фазу жизни или состояние ФН. Данная команда доступна только для отладочной версии ПО ФН.
// Параметры: 16h (22)  полная очистка архива и перевод ФН в фазу жизни Готовность к фискализации

#define FS_RESET_PARAM_CLEAR_ALL		0x16
extern fcore int fs_reset(uint8_t params, int32_t timeout);

//////////////////////////////////////////////////////////////
// Статус ККМ

// Настройка (0)
#define FS_LIFESTATE_NONE			0
// Готовность к фискализации (1)
#define	FS_LIFESTATE_FREADY			1
// Фискальный режим (3)
#define	FS_LIFESTATE_FMODE			3
// Постфискальный режим, идет передача ФД в ОФД (7)
#define	FS_LIFESTATE_POST_FMODE			7
// Чтение данных из Архива ФН (15)
#define	FS_LIFESTATE_ARCHIVE_READ		15

//////////////////////////////////////////////////////////////
// Текущий документ

// 00h  Нет открытого документа
#define FS_CURDOC_NOT_OPEN				0x00
// 01h  Отчёт о регистрации ККТ
#define FS_CURDOC_REG_REPORT				0x01
// 02h  Отчёт об открытии смены
#define FS_CURDOC_SHIFT_OPEN_REPORT			0x02
// 04h  Кассовый чек
#define FS_CURDOC_CHEQUE				0x04
// 08h  Отчёт о закрытии смены
#define FS_CURDOC_SHIFT_CLOSE_REPORT			0x08
// 10h  отчёт о закрытии фискального режима
#define FS_CURDOC_FMODE_CLOSE_REPORT			0x10
// 11h  Бланк строгой отчетности
#define FS_CURDOC_BSO					0x11
// 12h - Отчет об изменении параметров регистрации ККТ в связи с заменой ФН
#define FS_CURDOC_REG_PARAMS_REPORT_ON_FS_CHANGE	0x12
// 13h  Отчет об изменении параметров регистрации ККТ
#define FS_CURDOC_REG_PARAMS_REPORT			0x13
// 14h  Кассовый чек коррекции
#define FS_CURDOC_CORRECTION_CHEQUE			0x14
// 15h  БСО коррекции
#define FS_CURDOC_CORRECTION_BSO			0x15
// 17h  Отчет о текущем состоянии расчетов
#define FS_CURDOC_CURRENT_PAY_REPORT			0x17

//////////////////////////////////////////////////////////////
// Данные документа

// 0  нет данных документа
#define FS_NO_DOC_DATA				0
// 1  получены данные документа
#define FS_HAS_DOC_DATA				1

//////////////////////////////////////////////////////////////
// Состояние смены
// 0  смена закрыта
#define FS_SHIFT_CLOSED				0
// 1  смена открыта
#define FS_SHIFT_OPENED				1

//////////////////////////////////////////////////////////////
// Предупреждения об исчерпании ресурсов ФН

// срочная замена КС
#define FS_ALERT_CC_REPLACE_URGENT		0x01
// исчерпание ресурса КС
#define FS_ALERT_CC_EXHAUST			0x02
// переполнение памяти (90% заполнено)
#define FS_ALERT_MEMORY_FULL			0x04
// превышено время ожидания ответа от ОФД
#define FS_ALERT_RESP_TIMEOUT			0x08
// Отказ по данным форматно-логического контроля (признак передается в Подтверждении от ОФД)
#define FS_ALERT_FLC				0x10
//Требуется настройка ККТ (признак передается в Подтверждении от ОФД)
#define FS_ALERT_SETUP_REQUIRED			0x20
// ОФД аннулирован(признак передается в Подтверждении от ОФД)
#define FS_ALERT_OFD_REVOKED			0x40
// критическая ошибка ФН
#define FS_ALERT_CRITRICAL			0x80

#pragma pack(push, 1)
typedef struct __PACKED__
{
	// Состояние фазы жизни
	uint8_t life_state;
	// Текущий документ
	uint8_t current_doc;
	// Данные документа
	uint8_t doc_data;
	// Состояние смены
	uint8_t shift_state;
	// Флаги предупреждения
	uint8_t alert_flags;
	// Дата и время последнего документа
	fs_date_time_t date_time;
	// Номер ФН
#define FS_SERIAL_NUMBER_LEN	16
	char serial_number[FS_SERIAL_NUMBER_LEN];
	// Номер последнего ФД
	uint32_t last_doc_number;
} fs_status_t;
#pragma pack(pop)

// Команда 30h  Запрос статуса ФН
// Команду 30h ККТ использует для запроса текущего состояния ФН.
extern fcore int fs_get_status(fs_status_t *status, int32_t timeout);
// Команда 31h  Запрос номера ФН
extern fcore int fs_get_serial_number(char serialNumber[FS_SERIAL_NUMBER_LEN], int32_t timeout);

// данные команды (32h) (получить срок действия ФН)
#pragma pack(push, 1)
typedef struct
{
	fs_date_t date;
	uint8_t remaining_number_of_registrations;
	uint8_t number_of_registrations;
} fs_lifetime_t;
#pragma pack(pop)

// Команда 32h  Запрос срока действия ФН
extern fcore int fs_get_lifetime(fs_lifetime_t *data, int32_t timeout);

#define FS_VERSION_LEN	16
// Команда 33h  Запрос версии ФН
extern fcore int fs_get_version(char version[FS_VERSION_LEN], uint8_t *type, int32_t timeout);

//////////////////////////////////////////////////////////////
// Команда 35h  Запрос последних ошибок ФН

typedef struct {
#define FS_MAX_ERROR_DETAIL_LEN	256
	uint8_t errorDetail[FS_MAX_ERROR_DETAIL_LEN];
	uint8_t size;
} fs_error_detail_t;

// Команда 35h  Запрос последних ошибок ФН
// Команда позволяет запросить диагностические данные о работе ФН.Получаемые данные необходимо сохранить для дальнейшей передачи разработчикам ФН.
extern fcore int fs_get_error_detail(fs_error_detail_t *result, int32_t timeout);

// Команда 06h  Отменить документ
// Команда отменяет любой ранее начатый фискальный документ.Все данные, введенные с помощью команды Передать данные документа удаляются.
extern fcore int fs_cancel_document(int32_t timeout);

//////////////////////////////////////////////////////////////
// TLV 

// Команда 07h  Передать данные документа
// Команда предназначена для передачи из ККТ в ФН данных начатого фискального документа.Данные передаются как список TLV объектов.ФН контролирует правильность TLV(соответствие длин тэгов фактической длине), поэтому необходимо передавать только целые TLV объекты(то есть нельзя разбивать один объект на 2 команды).
// Суммарная длина всех данных, добавляемых с помощью данной команды, зависит от типа фискального документа и приводится в описании команды Начать ... для каждого из фискальных документов.
// ФН не выполняет форматно-логический контроль TLV данных.
// Допустимо вызывать данную функцию несколько раз, для передачи всех необходимых данных.
extern fcore int fs_send_document_data(const uint8_t tlv_data[], uint16_t size, int32_t timeout);


//////////////////////////////////////////////////////////////
// Команда 02h  Начать отчет о регистрации ККТ (фискализация ФН)

//////////////////////////////////////////////////////////////
// Отчет о регистрации
#define FS_REG_TYPE_REGISTRATION					0
// отчет об изменении параметров регистрации в связи с заменой ФН
#define FS_REG_TYPE_UPDATE_WITH_FS_CHANGE		1
// отчет об изменении параметров регистрации без замены ФН
#define FS_REG_TYPE_UPDATE_WITHOUT_FS_CHANGE	2

// Команда 02h  Начать отчет о регистрации ККТ (фискализация ФН)
// Команда начинает формирование одного из следующих отчетов :
//   Отчет о регистрации ККТ
//   Отчет об изменении параметров регистрации ККТ, в связи с заменой ФН
//   Отчет об изменении параметров регистрации ККТ без замены ФН
// После выполнения этой команды ФН ожидает получение дополнительных данных с помощью команды Передать данные документа.
// Максимальный размер передаваемых данных не может превышать 2 килобайта.
extern fcore int fs_begin_registration(uint8_t type, int32_t timeout);


// Данные документа
#pragma pack(push, 1)
typedef struct {
	// Номер ФД
	uint32_t doc_no;
	// Фискальный признак
	uint32_t fiscal_sign;
} fs_doc_info_t;
#pragma pack(pop)

//////////////////////////////////////////////////////////////
// Команда 03h  Сформировать отчет о регистрации (перерегистрации) ККТ

//////////////////////////////////////////////////////////////
// Кодировки битового поля Код налогообложения

// Общая
#define FS_REG_TAXCODE_COMMON						0x1U
// Упрощенная Доход
#define FS_REG_TAXCODE_SIMPLE_INCOME				0x2U
// Упрощенная Доход минус Расход
#define FS_REG_TAXCODE_SIMPLE_INCOME_MINUS_EXPENSES	0x4U
// Единый налог на вмененный доход
#define FS_REG_TAXCODE_ENVD							0x8U
// Единый сельскохозяйственный налог
#define FS_REG_TAXCODE_AGRICULTURAL_TAX				0x10U
// Патентная система налогообложения	
#define FS_REG_TAXCODE_PATENT						0x20U


//////////////////////////////////////////////////////////////
// Кодировки битового поля Режим работы

// Шифрование
#define FS_REG_MODE_CRYPTO				0x1U
// Автономный режим
#define FS_REG_MODE_OFFLINE				0x2U
// Автоматический режим
#define FS_REG_MODE_AUTO				0x4U
// Применение в сфере услуг
#define FS_REG_MODE_SERIVICE_SPHERE		0x8U
// Режим БСО(1) иначе Режим чеков(0)
#define FS_REG_MODE_BSO					0x10U
// Применение в Интернет-торговле
#define FS_REG_MODE_INTERNET			0x20U

//////////////////////////////////////////////////////////////
// Значения поля Код причины перерегистрации

// Замена ФН (Для Изменения параметров регистрации ККТ в связи с заменой ФН, это значение будет задано ФН автоматически)
#define FS_REG_REREG_FS_CHANGE	1
// Смена ОФД
#define FS_REG_REREG_OFD_CHANGE	2
// Смена реквизитов пользователя
#define FS_REG_REREG_DETAILS_CHANGE	3
// Смена настроек ККТ
#define FS_REG_REREG_KKT_SETTINGS_CHANGE	4

#pragma pack(push, 1)
typedef struct {
	// дата / время регистрации
	fs_date_time_t date_time;
	// инн
	char inn[12];
	// регистрационный номер
	char reg_number[20];
	// код налогообложения
	uint8_t tax_code;
	// режим работы
	uint8_t mode;
	// код причины перерегистрации (если без замены ФН, то данное поле должно быть = 0
	uint8_t reregister_code;
} fs_registration_t;
#pragma pack(pop)

// Команда 03h  Сформировать отчет о регистрации (перерегистрации) ККТ
// Данная команда завершает формирование отчета о регистрации ККТ и переводит ФН в фискальный режим.
// До её вызова должны быть выполнены команды Начать отчет о регистрации (перерегистрации) ККТ и Передать данные документа.
extern fcore int fs_end_registration(uint8_t type, fs_registration_t *data, fs_doc_info_t *result, int32_t timeout);

// Команда 04h  Начать закрытие фискального режима ФН
extern fcore int fs_begin_close_fiscal_mode(int32_t timeout);


//////////////////////////////////////////////////////////////
// Команда 05h  Закрыть фискальный режим ФН

// данные для команды 05h  Закрыть фискальный режим ФН
#pragma pack(push, 1)
typedef struct {
	//Дата и время
	fs_date_time_t date_time;
	//Регистрационный номер ККТ
	char reg_number[20];
} fs_close_fiscal_mode_t;
#pragma pack(pop)

// Команда 05h  Закрыть фискальный режим ФН
// Данная команда закрывает Фискальный режим и переводит ФН в Постфискальный режим
extern fcore int fs_end_close_fiscal_mode(fs_close_fiscal_mode_t* data, fs_doc_info_t *result, int32_t timeout);


//////////////////////////////////////////////////////////////
// Команда 10h  Запрос параметров текущей смены

// данные для команды 10h  Запрос параметров текущей смены
#pragma pack(push, 1)
typedef struct {
	// Состояние смены
	// 0  смена закрыта 1  смена открыта
	bool is_opened;
	// Номер смены
	// Если смена закрыта, то  номер последней закрытой смены, если открыта, то номер текущей смены.
	uint16_t shift_no;
	// Номер чека
	// Если смена закрыта, то число документов в предыдущей закрытой смене(0, если это первая смена).
	// Если смена открыта, но нет ни одного чека, то 0. 
	// В остальных случаях  номер последнего сформированного чека
	uint16_t cheque_no;
} fs_current_shift_t;
#pragma pack(pop)

// Команда 10h  Запрос параметров текущей смены
// Данная команда позволяет узнать состояние текущей смены ККТ.
// Всегда выдаются данные текущей смены (даже если она уже закрыта), пока не будет открыта новая смена.
extern fcore int fs_get_current_shift_data(fs_current_shift_t* data, int32_t timeout);


// Команда 11h  Начать открытие смены
// Команда начинает процедуру открытия смены.
// Данные фискального документа должны быть переданы с помощью команды Передача данных документа.
// Максимальный объём данных 1 килобайт.Условия выполнения : ФН должен быть в фискальном режиме.
// Время открытия смены может на 1 час отставать от времени закрытия предыдущей смены(или времени фискализации ФН).
extern fcore int fs_begin_open_shift(fs_date_time_t* date_time, int32_t timeout);


//////////////////////////////////////////////////////////////
// Команда 12h  Открыть смену

// результат открытия смены
#pragma pack(push, 1)
typedef struct {
	// Номер новой открытой смены
	uint16_t shift_no;
	// данные документа
	fs_doc_info_t doc_info;
	// флаги предупреждений (только 1.1)
	uint8_t alert_flags;
} fs_open_shift_result_t;
#pragma pack(pop)

// Команда 12h  Открыть смену
// Команда, завершающая процедуру открытия смены.
// Только после выполнения данной команды становятся возможными процедуры формирования чеков и закрытия смены.
// Условия выполнения : должна быть выполнена команда Начать открытие смены; должны быть переданы данные документа.
extern fcore int fs_end_open_shift(fs_open_shift_result_t* result, int32_t timeout);

// Команда 13h  Начать закрытие смены
// Команда начинает процедуру закрытия смены.
// Условия выполнения : смена должна быть открыта; чек должен быть закрыт; ФН должен быть в фискальном режиме.
// Данные фискального документа должны быть переданы с помощью команды Передача данных документа.
// Максимальный объём данных 1 килобайт.
extern fcore int fs_begin_close_shift(fs_date_time_t* date_time, int32_t timeout);

//////////////////////////////////////////////////////////////
// Команда 14h  Закрыть смену
typedef fs_open_shift_result_t fs_close_shift_result_t;

// Команда 14h  Закрыть смену
// Команда завершает процедуру закрытия смены.
// Условия выполнения : должна быть выполнена команда Начать закрытие смены и Передать данные документа.
extern fcore int fs_end_close_shift(fs_close_shift_result_t* result, int32_t timeout);

// Команда 15h  Начать формирование чека(БСО)
// Команда начинает процедуру формирования фискального документа Кассовый чек(или Бланка строгой отчетности).Условия выполнения :
// Смена должна быть открыта и не был начат другой чек.
// Дата и время не должны превосходить более чем на 24 часа дату и время открытия данной смены.
// Данные чека необходимо передать с помощью команды Передать данные документа, максимальный объём данных чека не может превышать 30 килобайт.
extern fcore int fs_begin_cheque(fs_date_time_t* date_time, int32_t timeout);

//////////////////////////////////////////////////////////////
//Команда 16h  Сформировать чек

// Тип платежа
typedef enum {
	FS_PAY_TYPE_RECEIPT = 1,
	FS_PAY_TYPE_RETURN_RECEIPT = 2,
	FS_PAY_TYPE_EXPENSE = 3,
	FS_PAY_TYPE_RETURN_EXPENSE = 4,
	FS_PAY_TYPE_MAX = FS_PAY_TYPE_RETURN_EXPENSE
} fs_pay_type_t;

// результат открытия смены
#pragma pack(push, 1)
typedef struct {
	//Дата и время. Передается время ККТ, печатаемое на чеке
	fs_date_time_t date_time;
	//Тип операции 1  Приход, 2  Возврат прихода, 3  Расход, 4  Возврат расхода
	uint8_t pay_type;
	// Итог чека. Передается итоговая сумма	чека(в копейках).
	uint64_t sum;
} fs_end_cheque_t;
#pragma pack(pop)

// результат открытия смены
#pragma pack(push, 1)
typedef struct {
	// Номер чека внутри смены
	uint16_t cheque_no;
	// данные документа
	fs_doc_info_t doc_info;
} fs_end_cheque_result_t;
#pragma pack(pop)


//Команда 16h  Сформировать чек
//Команда подается после того, как все данные чека были переданы с помощью команды 15h или команды 17h.
extern fcore int fs_end_cheque(fs_end_cheque_t *data, fs_end_cheque_result_t *result, int32_t timeout);

//Команда 17h  Начать формирование чека коррекции(БСО).
//Команда начинает процедуру формирования фискального документа Кассовый чек коррекции.Условия выполнения :
//  Смена должна быть открыта и не был начат другой чек(или чек коррекции).
//  Дата и время не должны превосходить более чем на 24 часа дату и время открытия данной смены.
// Данные чека необходимо передать с помощью команды Передать данные документа, максимальный объём данных чека не может превышать 30 килобайт.
extern fcore int fs_begin_correction_cheque(fs_date_time_t* date_time, int32_t timeout);

// Команда 18h  Начать формирование отчета о состоянии расчетов
// Команда начинает процедуру формирования фискального документа Отчет о состоянии расчетов.Условия выполнения :
//   ФН должен быть в состоянии Фискальный режим или Постфиксальный режим
//   Смена должна быть закрыта
//   Данные фискального документа должны быть переданы с помощью команды Передача данных документа, максимальный объем данных 2 килобайта
//   Максимальный объём данных 1 килобайт.Условия выполнения : ФН должен быть в фискальном режиме.
extern fcore int fs_begin_calculation_report(fs_date_time_t* date_time, int32_t timeout);

///////////////////////////////////////////////////////////
// Команда 19h  Сформировать отчет о состоянии расчетов

#pragma pack(push, 1)
typedef struct {
	// данные документа
	fs_doc_info_t doc_info;
	// Кол - во неподтвержденных документов
	uint32_t unconfirmed_doc_count;
	// Дата первого неподтвержденного документа (ГГ, ММ, ДД)
	fs_date_t first_unconfirmed_doc_date;
} fs_end_calculation_report_result_t;
#pragma pack(pop)

// Команда 19h  Сформировать отчет о состоянии расчетов
// Команда, завершающая процедуру формирования отчета о состоянии расчетов.
// Условия выполнения : должна быть выполнена команда Начать формирование отчета о состоянии расчетов
extern fcore int fs_end_calculation_report(fs_end_calculation_report_result_t *result, int32_t timeout);

//////////////////////////////////////////////////////////////////////////////////
// Команды информационного обмена с Сервером ОФД
//

//////////////////////////////////////////////////////////////////////////////////
// Команда 20h  Получить статус информационного обмена

// Бит 0  транспортное соединение установлено
#define FS_TRANS_STATE_CONNECTED			0x1
// Бит 1  есть сообщение для передачи в ОФД
#define FS_TRANS_STATE_HAS_REQ				0x2
// Бит 2  ожидание ответного сообщения (квитанции) от ОФД
#define FS_TRANS_STATE_WAIT_ACK				0x4
// Бит 3  есть команда от ОФД
#define FS_TRANS_STATE_HAS_CMD				0x8
// Бит 4  изменились настройки соединения с ОФД
#define FS_TRANS_STATE_SETTINGS_CHANGED		0x10
// Бит 5  ожидание ответа
#define FS_TRANS_STATE_WAIT_RESP			0x20

#pragma pack(push, 1)
typedef struct {
	// Статус информационного обмена
	uint8_t transmission_state;
	// Состояние чтения сообщения для ОФД (0 - чтение не началось, 1 - чтение началось)
	uint8_t is_read_msg_started;
	// Количество сообщений для передачи в ОФД
	uint16_t send_queue_count;
	// Номер документа для ОФД первого в очереди
	uint32_t first_doc_no;
	// Дата-время документа для ОФД первого в очереди
	fs_date_time_t first_doc_date_time;
} fs_transmission_status_t;
#pragma pack(pop)


// Команда 20h  Получить статус информационного обмена
// Команда запрашивает текущий статус информационного обмена с Сервером ОФД.
// Позволяет узнать, есть ли сообщения для передачи в Сервер ОФД, есть ли команды от Сервера ОФД,
// каков статус по блочному обмену сообщениями между Клиент ККТ и Клиент ФН.
extern fcore int fs_get_transmission_status(fs_transmission_status_t *result, int32_t timeout);

// Команда 21h  Передать статус транспортного соединения с Сервером ОФД
// Данная команда уведомляет Клиента ФН об установлении или разрыве транспортного соединения с Сервером ОФД.
// 0  Транспортное соединение разорвано
// 1  Транспортное соединение установлено
extern fcore int fs_set_connection_state(uint8_t is_connected, int32_t timeout);

// Команда 22h  Начать чтение Сообщения для Сервера ОФД
// Данная команда начинает чтение Сообщения для ОФД.
// После её выполнения возможны  команда чтения блока Сообщения, команда отмены чтения Сообщения или команда завершения чтения Сообщения.
extern fcore int fs_begin_read_msg(uint16_t *msg_size, int32_t timeout);

// Команда 23h  Прочитать блок сообщения для Сервера ОФД
// Данная команда предназначена для поблочной вычитки Сообщения для передачи в ОФД.
// Длину читаемого блока и смещение определяет ККТ.
// Если фактический размер данных меньше запрошенной длины, то будет возвращен фактический размер данных.
// Максимальная читаемая длина не может быть больше максимального размера данных Сообщения(см.Логический интерфейс ФН).
extern fcore int fs_read_msg(uint16_t offset, uint8_t *data, uint16_t* size, int32_t timeout);

// Команда 24h  Отменить чтение Сообщения для Сервера ОФД
// Выполнение этой команды отменяет начатую операцию чтения сообщения для ОФД.
extern fcore int fs_cancel_read_msg(int32_t timeout);

// Команда 25h  Завершить чтение Сообщения для Сервера ОФД
// Данная команда уведомляет ФН, что сообщение для ОФД было полностью получено.
extern fcore int fs_end_read_msg(int32_t timeout);

///////////////////////////////////////////////////////
//Команда 26h  Передать Квитанцию от Сервера ОФД

// Причины отказа (если в ответе на 26h вернулся код 0x20
// 1  Неверный фискальный признак
#define FS_OFD_ASK_BAD_FISCAL_SIGN		1
// 2  Неверный формат квитанции
#define FS_OFD_ASK_BAD_FORMAT			2
// 3  Неверный номер ФД
#define FS_OFD_ASK_BAD_FISCAL_DOC_NO	3
// 4  Неверный номер ФН
#define FS_OFD_ASK_BAD_FS_NO			4
// 5  Неверный CRC
#define FS_OFD_ASK_BAD_CRC				5

// Команда 26h  Обработать Квитанцию от Сервера ОФД
// Данная команда предназначена для передачи в ФН Сообщения(Квитанции) от ОФД.
// Длина сообщения от ОФД ограничена максимальной длиной данных в одной команде ФН (см.Логический интерфейс ФН).
extern fcore int fs_process_ofd_ack(uint8_t *data, uint16_t size, uint8_t *resp_code, uint8_t *stlv, uint16_t *stlv_size, int32_t timeout);


///////////////////////////////////////////////////////
// Команда 40h  Найти фискальный документ по номеру

#pragma pack(push, 1)
typedef struct {
	// Тип документа
	uint8_t doc_type;
	// Получена ли квитанция из ОФД 1 - да, 0 - нет
	uint8_t has_ofd_ask;
} fs_find_result_t;
#pragma pack(pop)

// Команда 40h  Найти фискальный документ по номеру
// Команда позволяет найти в Архиве ФН фискальный документ по его номеру.
// Документ выдается в ответном сообщении.
extern fcore int fs_find_doc_by_number(volatile uint32_t doc_no, fs_find_result_t *result,
                                 uint8_t *doc_data, uint16_t *doc_data_size, int32_t timeout);

// Команда 41h  Запрос квитанции о получении фискального документа фискальных данных в ОФД по номеру документа
// Команда позволяет найти в Архиве ФН квитанцию, подтверждающую получение ФД в ОФД.

#pragma pack(push, 1)
typedef struct {
	// дата и время
	fs_date_time_t date_time;
	// фискальный признак ОФД
#define OFD_FISCAL_SIGN_SIZE    18
	uint8_t ofd_fiscal_sign[OFD_FISCAL_SIGN_SIZE];
	// номер ФД
	uint32_t doc_number;
} fs_ofd_ask_result_t;
#pragma pack(pop)
extern fcore int fs_get_ofd_ack_by_number(uint32_t doc_no, fs_ofd_ask_result_t *result, int32_t timeout);

//Команда 42h  Запрос количества ФД, на которые нет квитанции
//Команда позволяет получить количество документов в Архиве ФН, на которые не получены квитанции из ОФД.
extern fcore int fs_get_doc_count_without_ofd_ack(uint16_t *count, int32_t timeout);

// Команда 43h  Запрос итогов фискализации ФН
#pragma pack(push, 1)
typedef struct {
	// данные регистрации
	fs_registration_t reg;
	// данные документа
	fs_doc_info_t doc_info;
} fs_registration_result_t;
#pragma pack(pop)

// Команда 43h  Запрос итогов фискализации ФН
// docNumber : Порядковый номер отчета о регистрации (перерегистрации ККТ), если -1, то отчет о фискализации вариант 1
// type: тип ФН, 0 - ФН в режиме поддержки 1.0, 1 - ФН в режмие поддержки 1.1
extern fcore int fs_get_registration_result(int16_t number, fs_registration_result_t *result, int32_t timeout);

// Команда 44h  Запрос параметра фискализации ФН
// Позволяет получить значение TLV одного из параметров, заданных при фискализации в команде Передать данные фискализации.
// Данные доступны для выдачи только после успешного проведения фискализации.
extern fcore int fs_get_registration_parameter(int16_t number, uint16_t tag, void *data, uint32_t *size, int32_t timeout);



// Команда 45h  Запрос фискального документа в TLV формате
// Данная команда позволяет прочитать всё содержимое фискального документа в TLV формате, включая данные полученные от ККТ и данные, сформированные ФН.
#pragma pack(push, 1)
typedef struct {
	// тэг
	uint16_t tag;
	// длина
	uint16_t length;
	// данные
#ifndef WIN32
	uint8_t data[];
#endif
} fs_tlv_t;
#pragma pack(pop)

extern fcore int fs_get_document_tlv(int32_t doc_no, fs_tlv_t *stlv, int32_t timeout);

// Команда 46h  Чтение TLV фискального документа
// Данная команда предназначена для получения данных фискального документа из Архива ФН.До выполнения этой команды должна быть выполнена команда 45h.
// Команду 46h необходимо подавать до тех пор, пока ФН не ответит кодом ошибки 08h  нет запрошенных данных.
// В каждом ответе ФН на команду 46h содержится только одно поле TLV или STLV верхнего уровня.
extern fcore int fs_read_document_tlv(void *data, uint32_t *size, int32_t timeout);

// Команда 47h  Чтение TLV параметров фискализации
// Данная команда предназначена для получения всех данных, переданных ККТ, с помощью команды 07h перед выполнением команды 03h.
// Перед использованием данной команды необходимо вызвать команду 44h Запрос параметра фискализации ФН со значением FFFFh в качестве второго параметра.
// В противном случае команда вернет код ошибки 08h  нет запрошенных данных.
// Команду 47h необходимо подавать до тех пор, пока ФН не ответит кодом ошибки 08h  нет запрошенных данных.
// В каждом ответе ФН на команду 47h содержится только одно поле TLV или STLV верхнего уровня.
extern fcore int fs_read_registration_tlv(void *data, uint32_t *size, int32_t timeout);

#endif
